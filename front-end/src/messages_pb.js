/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Brand', null, global);
goog.exportSymbol('proto.Brand.State', null, global);
goog.exportSymbol('proto.Category', null, global);
goog.exportSymbol('proto.Color', null, global);
goog.exportSymbol('proto.Image', null, global);
goog.exportSymbol('proto.Image.Type', null, global);
goog.exportSymbol('proto.LeadTime', null, global);
goog.exportSymbol('proto.MakerValue', null, global);
goog.exportSymbol('proto.PaginationData', null, global);
goog.exportSymbol('proto.Product', null, global);
goog.exportSymbol('proto.ProductOption', null, global);
goog.exportSymbol('proto.SearchMakersWithFiltersRequest', null, global);
goog.exportSymbol('proto.SearchMakersWithFiltersResponse', null, global);
goog.exportSymbol('proto.SearchMakersWithFiltersResponse.ProductsForCategory', null, global);
goog.exportSymbol('proto.SearchMakersWithFiltersSortBy', null, global);
goog.exportSymbol('proto.SortOrder', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Brand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Brand.repeatedFields_, null);
};
goog.inherits(proto.Brand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Brand.displayName = 'proto.Brand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Color = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Color, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Color.displayName = 'proto.Color';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProductOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProductOption.repeatedFields_, null);
};
goog.inherits(proto.ProductOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProductOption.displayName = 'proto.ProductOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Product = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Product.repeatedFields_, null);
};
goog.inherits(proto.Product, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Product.displayName = 'proto.Product';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Image.repeatedFields_, null);
};
goog.inherits(proto.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Image.displayName = 'proto.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Category = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Category.repeatedFields_, null);
};
goog.inherits(proto.Category, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Category.displayName = 'proto.Category';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PaginationData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PaginationData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PaginationData.displayName = 'proto.PaginationData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SearchMakersWithFiltersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SearchMakersWithFiltersRequest.repeatedFields_, null);
};
goog.inherits(proto.SearchMakersWithFiltersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SearchMakersWithFiltersRequest.displayName = 'proto.SearchMakersWithFiltersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SearchMakersWithFiltersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SearchMakersWithFiltersResponse.repeatedFields_, null);
};
goog.inherits(proto.SearchMakersWithFiltersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SearchMakersWithFiltersResponse.displayName = 'proto.SearchMakersWithFiltersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SearchMakersWithFiltersResponse.ProductsForCategory.repeatedFields_, null);
};
goog.inherits(proto.SearchMakersWithFiltersResponse.ProductsForCategory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SearchMakersWithFiltersResponse.ProductsForCategory.displayName = 'proto.SearchMakersWithFiltersResponse.ProductsForCategory';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Brand.repeatedFields_ = [7,8,63];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Brand.prototype.toObject = function(opt_includeInstance) {
  return proto.Brand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Brand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Brand.toObject = function(includeInstance, msg) {
  var obj = {
    token: jspb.Message.getField(msg, 1),
    tokenalias: jspb.Message.getField(msg, 100),
    isinternal: jspb.Message.getField(msg, 84),
    active: jspb.Message.getField(msg, 2),
    name: jspb.Message.getField(msg, 3),
    shortdescription: jspb.Message.getField(msg, 4),
    description: jspb.Message.getField(msg, 5),
    url: jspb.Message.getField(msg, 6),
    categoriesList: jspb.Message.getRepeatedField(msg, 7),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.Image.toObject, includeInstance),
    facebookhandle: jspb.Message.getField(msg, 9),
    twitterhandle: jspb.Message.getField(msg, 10),
    instagramhandle: jspb.Message.getField(msg, 11),
    youtubehandle: jspb.Message.getField(msg, 12),
    pinteresthandle: jspb.Message.getField(msg, 13),
    minimumorderamountcents: jspb.Message.getField(msg, 14),
    firstorderminimumamountcents: jspb.Message.getField(msg, 45),
    reorderminimumamountcents: jspb.Message.getField(msg, 46),
    from: jspb.Message.getField(msg, 16),
    madein: jspb.Message.getField(msg, 17),
    madeinstate: jspb.Message.getField(msg, 26),
    madeincity: jspb.Message.getField(msg, 27),
    basedin: jspb.Message.getField(msg, 37),
    basedinstate: jspb.Message.getField(msg, 38),
    basedincity: jspb.Message.getField(msg, 39),
    ecofriendly: jspb.Message.getField(msg, 28),
    charitable: jspb.Message.getField(msg, 29),
    handmade: jspb.Message.getField(msg, 30),
    womenowned: jspb.Message.getField(msg, 131),
    organic: jspb.Message.getField(msg, 132),
    smallbatch: jspb.Message.getField(msg, 133),
    soldonamazon: jspb.Message.getField(msg, 79),
    madeinusadescription: jspb.Message.getField(msg, 65),
    handmadedescription: jspb.Message.getField(msg, 66),
    charitabledescription: jspb.Message.getField(msg, 67),
    ecofriendlydescription: jspb.Message.getField(msg, 68),
    local: jspb.Message.getField(msg, 40),
    storyimage: (f = msg.getStoryimage()) && proto.Image.toObject(includeInstance, f),
    videourl: jspb.Message.getField(msg, 62),
    socialmediaimagesList: jspb.Message.toObjectList(msg.getSocialmediaimagesList(),
    proto.Image.toObject, includeInstance),
    leadtimeweeks: jspb.Message.getField(msg, 36),
    leadtimedays: jspb.Message.getField(msg, 74),
    lowerboundleadtimedays: jspb.Message.getField(msg, 111),
    upperboundleadtimedays: jspb.Message.getField(msg, 112),
    favorite: jspb.Message.getField(msg, 51),
    likes: jspb.Message.getField(msg, 18),
    creationyear: jspb.Message.getField(msg, 19),
    squaredimage: (f = msg.getSquaredimage()) && proto.Image.toObject(includeInstance, f),
    squaredcategoryimagesMap: (f = msg.getSquaredcategoryimagesMap()) ? f.toObject(includeInstance, proto.Image.toObject) : [],
    emailheroimage: (f = msg.getEmailheroimage()) && proto.Image.toObject(includeInstance, f),
    emaildescription: jspb.Message.getField(msg, 21),
    facebookfollowers: jspb.Message.getField(msg, 32),
    instagramfollowers: jspb.Message.getField(msg, 33),
    twitterfollowers: jspb.Message.getField(msg, 34),
    firstorderrewardamountcents: jspb.Message.getField(msg, 52),
    defaultrewardamountcents: jspb.Message.getField(msg, 53),
    firstorderdiscountpercentage: jspb.Message.getField(msg, 56),
    defaultdiscountpercentage: jspb.Message.getField(msg, 57),
    isfirstorder: jspb.Message.getField(msg, 72),
    firstorderreturnslimitcents: jspb.Message.getField(msg, 73),
    zipcodeprotectionenabled: jspb.Message.getField(msg, 85),
    shopifyaccessrenewedat: jspb.Message.getField(msg, 87),
    possyncingenabled: jspb.Message.getField(msg, 88),
    shopifyaccesstoken: jspb.Message.getField(msg, 89),
    shopifyshopname: jspb.Message.getField(msg, 90),
    firstactiveat: jspb.Message.getField(msg, 95),
    activeproductscount: jspb.Message.getField(msg, 99),
    lastproductaddedat: jspb.Message.getField(msg, 104),
    hasnewproducts: jspb.Message.getField(msg, 105),
    elevatecommissionbps: jspb.Message.getField(msg, 103),
    shipwithindigofair: jspb.Message.getField(msg, 106),
    isboomexclusive: jspb.Message.getField(msg, 107),
    allowsscheduledorders: jspb.Message.getField(msg, 108),
    isnew: jspb.Message.getField(msg, 110),
    thanksgivingcutoffdate: jspb.Message.getField(msg, 113),
    christmascutoffdate: jspb.Message.getField(msg, 114),
    overrideleadtimeestimates: jspb.Message.getField(msg, 115),
    vacationstartdate: jspb.Message.getField(msg, 118),
    vacationenddate: jspb.Message.getField(msg, 119),
    vacationbannertext: jspb.Message.getField(msg, 120),
    noconsumerresale: jspb.Message.getField(msg, 126),
    acceptsreturns: jspb.Message.getField(msg, 127),
    returnordersdiscountbps: jspb.Message.getField(msg, 128),
    version: jspb.Message.getField(msg, 149),
    cansetpackagingandhandlingcosts: jspb.Message.getField(msg, 152)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Brand}
 */
proto.Brand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Brand;
  return proto.Brand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Brand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Brand}
 */
proto.Brand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 100:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenalias(value);
      break;
    case 84:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsinternal(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortdescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addCategories(value);
      break;
    case 8:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.addImages(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setFacebookhandle(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTwitterhandle(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstagramhandle(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setYoutubehandle(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPinteresthandle(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinimumorderamountcents(value);
      break;
    case 45:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFirstorderminimumamountcents(value);
      break;
    case 46:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReorderminimumamountcents(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setMadein(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setMadeinstate(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setMadeincity(value);
      break;
    case 37:
      var value = /** @type {string} */ (reader.readString());
      msg.setBasedin(value);
      break;
    case 38:
      var value = /** @type {string} */ (reader.readString());
      msg.setBasedinstate(value);
      break;
    case 39:
      var value = /** @type {string} */ (reader.readString());
      msg.setBasedincity(value);
      break;
    case 28:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEcofriendly(value);
      break;
    case 29:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCharitable(value);
      break;
    case 30:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHandmade(value);
      break;
    case 131:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWomenowned(value);
      break;
    case 132:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOrganic(value);
      break;
    case 133:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSmallbatch(value);
      break;
    case 79:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSoldonamazon(value);
      break;
    case 65:
      var value = /** @type {string} */ (reader.readString());
      msg.setMadeinusadescription(value);
      break;
    case 66:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandmadedescription(value);
      break;
    case 67:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharitabledescription(value);
      break;
    case 68:
      var value = /** @type {string} */ (reader.readString());
      msg.setEcofriendlydescription(value);
      break;
    case 40:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocal(value);
      break;
    case 61:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setStoryimage(value);
      break;
    case 62:
      var value = /** @type {string} */ (reader.readString());
      msg.setVideourl(value);
      break;
    case 63:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.addSocialmediaimages(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLeadtimeweeks(value);
      break;
    case 74:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLeadtimedays(value);
      break;
    case 111:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLowerboundleadtimedays(value);
      break;
    case 112:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpperboundleadtimedays(value);
      break;
    case 51:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFavorite(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLikes(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreationyear(value);
      break;
    case 82:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setSquaredimage(value);
      break;
    case 109:
      var value = msg.getSquaredcategoryimagesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Image.deserializeBinaryFromReader, "");
         });
      break;
    case 20:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setEmailheroimage(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmaildescription(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFacebookfollowers(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstagramfollowers(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTwitterfollowers(value);
      break;
    case 52:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFirstorderrewardamountcents(value);
      break;
    case 53:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDefaultrewardamountcents(value);
      break;
    case 56:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFirstorderdiscountpercentage(value);
      break;
    case 57:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDefaultdiscountpercentage(value);
      break;
    case 72:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsfirstorder(value);
      break;
    case 73:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFirstorderreturnslimitcents(value);
      break;
    case 85:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZipcodeprotectionenabled(value);
      break;
    case 87:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShopifyaccessrenewedat(value);
      break;
    case 88:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPossyncingenabled(value);
      break;
    case 89:
      var value = /** @type {string} */ (reader.readString());
      msg.setShopifyaccesstoken(value);
      break;
    case 90:
      var value = /** @type {string} */ (reader.readString());
      msg.setShopifyshopname(value);
      break;
    case 95:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFirstactiveat(value);
      break;
    case 99:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActiveproductscount(value);
      break;
    case 104:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastproductaddedat(value);
      break;
    case 105:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasnewproducts(value);
      break;
    case 103:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setElevatecommissionbps(value);
      break;
    case 106:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShipwithindigofair(value);
      break;
    case 107:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsboomexclusive(value);
      break;
    case 108:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowsscheduledorders(value);
      break;
    case 110:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnew(value);
      break;
    case 113:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setThanksgivingcutoffdate(value);
      break;
    case 114:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChristmascutoffdate(value);
      break;
    case 115:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOverrideleadtimeestimates(value);
      break;
    case 118:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVacationstartdate(value);
      break;
    case 119:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVacationenddate(value);
      break;
    case 120:
      var value = /** @type {string} */ (reader.readString());
      msg.setVacationbannertext(value);
      break;
    case 126:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNoconsumerresale(value);
      break;
    case 127:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcceptsreturns(value);
      break;
    case 128:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReturnordersdiscountbps(value);
      break;
    case 149:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 152:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCansetpackagingandhandlingcosts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Brand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Brand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Brand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Brand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeString(
      100,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 84));
  if (f != null) {
    writer.writeBool(
      84,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCategoriesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 45));
  if (f != null) {
    writer.writeInt64(
      45,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 46));
  if (f != null) {
    writer.writeInt64(
      46,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeString(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeString(
      26,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeString(
      27,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 37));
  if (f != null) {
    writer.writeString(
      37,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 38));
  if (f != null) {
    writer.writeString(
      38,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 39));
  if (f != null) {
    writer.writeString(
      39,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeBool(
      28,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeBool(
      29,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeBool(
      30,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 131));
  if (f != null) {
    writer.writeBool(
      131,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 132));
  if (f != null) {
    writer.writeBool(
      132,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 133));
  if (f != null) {
    writer.writeBool(
      133,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 79));
  if (f != null) {
    writer.writeBool(
      79,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 65));
  if (f != null) {
    writer.writeString(
      65,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 66));
  if (f != null) {
    writer.writeString(
      66,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 67));
  if (f != null) {
    writer.writeString(
      67,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 68));
  if (f != null) {
    writer.writeString(
      68,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 40));
  if (f != null) {
    writer.writeBool(
      40,
      f
    );
  }
  f = message.getStoryimage();
  if (f != null) {
    writer.writeMessage(
      61,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 62));
  if (f != null) {
    writer.writeString(
      62,
      f
    );
  }
  f = message.getSocialmediaimagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      63,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 36));
  if (f != null) {
    writer.writeInt64(
      36,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 74));
  if (f != null) {
    writer.writeInt64(
      74,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 111));
  if (f != null) {
    writer.writeInt64(
      111,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 112));
  if (f != null) {
    writer.writeInt64(
      112,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 51));
  if (f != null) {
    writer.writeBool(
      51,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeInt64(
      19,
      f
    );
  }
  f = message.getSquaredimage();
  if (f != null) {
    writer.writeMessage(
      82,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getSquaredcategoryimagesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(109, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Image.serializeBinaryToWriter);
  }
  f = message.getEmailheroimage();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeString(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeInt64(
      32,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 33));
  if (f != null) {
    writer.writeInt64(
      33,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 34));
  if (f != null) {
    writer.writeInt64(
      34,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 52));
  if (f != null) {
    writer.writeInt64(
      52,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 53));
  if (f != null) {
    writer.writeInt64(
      53,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 56));
  if (f != null) {
    writer.writeInt64(
      56,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 57));
  if (f != null) {
    writer.writeInt64(
      57,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 72));
  if (f != null) {
    writer.writeBool(
      72,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 73));
  if (f != null) {
    writer.writeInt64(
      73,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 85));
  if (f != null) {
    writer.writeBool(
      85,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 87));
  if (f != null) {
    writer.writeInt64(
      87,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 88));
  if (f != null) {
    writer.writeBool(
      88,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 89));
  if (f != null) {
    writer.writeString(
      89,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 90));
  if (f != null) {
    writer.writeString(
      90,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 95));
  if (f != null) {
    writer.writeInt64(
      95,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 99));
  if (f != null) {
    writer.writeInt64(
      99,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 104));
  if (f != null) {
    writer.writeInt64(
      104,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 105));
  if (f != null) {
    writer.writeBool(
      105,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 103));
  if (f != null) {
    writer.writeInt64(
      103,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 106));
  if (f != null) {
    writer.writeBool(
      106,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 107));
  if (f != null) {
    writer.writeBool(
      107,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 108));
  if (f != null) {
    writer.writeBool(
      108,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 110));
  if (f != null) {
    writer.writeBool(
      110,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 113));
  if (f != null) {
    writer.writeInt64(
      113,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 114));
  if (f != null) {
    writer.writeInt64(
      114,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 115));
  if (f != null) {
    writer.writeBool(
      115,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 118));
  if (f != null) {
    writer.writeInt64(
      118,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 119));
  if (f != null) {
    writer.writeInt64(
      119,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 120));
  if (f != null) {
    writer.writeString(
      120,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 126));
  if (f != null) {
    writer.writeBool(
      126,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 127));
  if (f != null) {
    writer.writeBool(
      127,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 128));
  if (f != null) {
    writer.writeInt64(
      128,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 149));
  if (f != null) {
    writer.writeInt64(
      149,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 152));
  if (f != null) {
    writer.writeBool(
      152,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Brand.State = {
  NEW: 1,
  REJECTED: 2,
  ONBOARDING_FORM_SENT: 3,
  ONBOARDING_FORM_STARTED: 4,
  ONBOARDING_FORM_COMPLETED: 5,
  PROFILE_STARTED: 6,
  ALL_PRODUCTS_UPLOADED: 7,
  PROFILE_IN_DESIGN_REVIEW: 8,
  PROFILE_IN_FINAL_REVIEW: 9,
  PROFILE_ACTIVATED: 10,
  WAITLISTED: 11
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.Brand.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Brand.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearToken = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string tokenAlias = 100;
 * @return {string}
 */
proto.Brand.prototype.getTokenalias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/** @param {string} value */
proto.Brand.prototype.setTokenalias = function(value) {
  jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearTokenalias = function() {
  jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasTokenalias = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional bool isInternal = 84;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getIsinternal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 84, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setIsinternal = function(value) {
  jspb.Message.setField(this, 84, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearIsinternal = function() {
  jspb.Message.setField(this, 84, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasIsinternal = function() {
  return jspb.Message.getField(this, 84) != null;
};


/**
 * optional bool active = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setActive = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearActive = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasActive = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.Brand.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Brand.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string shortDescription = 4;
 * @return {string}
 */
proto.Brand.prototype.getShortdescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Brand.prototype.setShortdescription = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearShortdescription = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasShortdescription = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.Brand.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Brand.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearDescription = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string url = 6;
 * @return {string}
 */
proto.Brand.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Brand.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearUrl = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string categories = 7;
 * @return {!Array<string>}
 */
proto.Brand.prototype.getCategoriesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.Brand.prototype.setCategoriesList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Brand.prototype.addCategories = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Brand.prototype.clearCategoriesList = function() {
  this.setCategoriesList([]);
};


/**
 * repeated Image images = 8;
 * @return {!Array<!proto.Image>}
 */
proto.Brand.prototype.getImagesList = function() {
  return /** @type{!Array<!proto.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Image, 8));
};


/** @param {!Array<!proto.Image>} value */
proto.Brand.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.Image=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Image}
 */
proto.Brand.prototype.addImages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.Image, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Brand.prototype.clearImagesList = function() {
  this.setImagesList([]);
};


/**
 * optional string facebookHandle = 9;
 * @return {string}
 */
proto.Brand.prototype.getFacebookhandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Brand.prototype.setFacebookhandle = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearFacebookhandle = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasFacebookhandle = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string twitterHandle = 10;
 * @return {string}
 */
proto.Brand.prototype.getTwitterhandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Brand.prototype.setTwitterhandle = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearTwitterhandle = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasTwitterhandle = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string instagramHandle = 11;
 * @return {string}
 */
proto.Brand.prototype.getInstagramhandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Brand.prototype.setInstagramhandle = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearInstagramhandle = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasInstagramhandle = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string youtubeHandle = 12;
 * @return {string}
 */
proto.Brand.prototype.getYoutubehandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Brand.prototype.setYoutubehandle = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearYoutubehandle = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasYoutubehandle = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string pinterestHandle = 13;
 * @return {string}
 */
proto.Brand.prototype.getPinteresthandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.Brand.prototype.setPinteresthandle = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearPinteresthandle = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasPinteresthandle = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int64 minimumOrderAmountCents = 14;
 * @return {number}
 */
proto.Brand.prototype.getMinimumorderamountcents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.Brand.prototype.setMinimumorderamountcents = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearMinimumorderamountcents = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasMinimumorderamountcents = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int64 firstOrderMinimumAmountCents = 45;
 * @return {number}
 */
proto.Brand.prototype.getFirstorderminimumamountcents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 45, 0));
};


/** @param {number} value */
proto.Brand.prototype.setFirstorderminimumamountcents = function(value) {
  jspb.Message.setField(this, 45, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearFirstorderminimumamountcents = function() {
  jspb.Message.setField(this, 45, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasFirstorderminimumamountcents = function() {
  return jspb.Message.getField(this, 45) != null;
};


/**
 * optional int64 reorderMinimumAmountCents = 46;
 * @return {number}
 */
proto.Brand.prototype.getReorderminimumamountcents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 46, 0));
};


/** @param {number} value */
proto.Brand.prototype.setReorderminimumamountcents = function(value) {
  jspb.Message.setField(this, 46, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearReorderminimumamountcents = function() {
  jspb.Message.setField(this, 46, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasReorderminimumamountcents = function() {
  return jspb.Message.getField(this, 46) != null;
};


/**
 * optional string from = 16;
 * @return {string}
 */
proto.Brand.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.Brand.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearFrom = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional string madeIn = 17;
 * @return {string}
 */
proto.Brand.prototype.getMadein = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.Brand.prototype.setMadein = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearMadein = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasMadein = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string madeInState = 26;
 * @return {string}
 */
proto.Brand.prototype.getMadeinstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/** @param {string} value */
proto.Brand.prototype.setMadeinstate = function(value) {
  jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearMadeinstate = function() {
  jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasMadeinstate = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional string madeInCity = 27;
 * @return {string}
 */
proto.Brand.prototype.getMadeincity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/** @param {string} value */
proto.Brand.prototype.setMadeincity = function(value) {
  jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearMadeincity = function() {
  jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasMadeincity = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional string basedIn = 37;
 * @return {string}
 */
proto.Brand.prototype.getBasedin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/** @param {string} value */
proto.Brand.prototype.setBasedin = function(value) {
  jspb.Message.setField(this, 37, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearBasedin = function() {
  jspb.Message.setField(this, 37, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasBasedin = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional string basedInState = 38;
 * @return {string}
 */
proto.Brand.prototype.getBasedinstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 38, ""));
};


/** @param {string} value */
proto.Brand.prototype.setBasedinstate = function(value) {
  jspb.Message.setField(this, 38, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearBasedinstate = function() {
  jspb.Message.setField(this, 38, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasBasedinstate = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional string basedInCity = 39;
 * @return {string}
 */
proto.Brand.prototype.getBasedincity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 39, ""));
};


/** @param {string} value */
proto.Brand.prototype.setBasedincity = function(value) {
  jspb.Message.setField(this, 39, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearBasedincity = function() {
  jspb.Message.setField(this, 39, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasBasedincity = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional bool ecoFriendly = 28;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getEcofriendly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 28, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setEcofriendly = function(value) {
  jspb.Message.setField(this, 28, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearEcofriendly = function() {
  jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasEcofriendly = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional bool charitable = 29;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getCharitable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 29, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setCharitable = function(value) {
  jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearCharitable = function() {
  jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasCharitable = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional bool handMade = 30;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getHandmade = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 30, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setHandmade = function(value) {
  jspb.Message.setField(this, 30, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearHandmade = function() {
  jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasHandmade = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional bool womenOwned = 131;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getWomenowned = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 131, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setWomenowned = function(value) {
  jspb.Message.setField(this, 131, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearWomenowned = function() {
  jspb.Message.setField(this, 131, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasWomenowned = function() {
  return jspb.Message.getField(this, 131) != null;
};


/**
 * optional bool organic = 132;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getOrganic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 132, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setOrganic = function(value) {
  jspb.Message.setField(this, 132, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearOrganic = function() {
  jspb.Message.setField(this, 132, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasOrganic = function() {
  return jspb.Message.getField(this, 132) != null;
};


/**
 * optional bool smallBatch = 133;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getSmallbatch = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 133, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setSmallbatch = function(value) {
  jspb.Message.setField(this, 133, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearSmallbatch = function() {
  jspb.Message.setField(this, 133, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasSmallbatch = function() {
  return jspb.Message.getField(this, 133) != null;
};


/**
 * optional bool soldOnAmazon = 79;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getSoldonamazon = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 79, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setSoldonamazon = function(value) {
  jspb.Message.setField(this, 79, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearSoldonamazon = function() {
  jspb.Message.setField(this, 79, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasSoldonamazon = function() {
  return jspb.Message.getField(this, 79) != null;
};


/**
 * optional string madeInUsaDescription = 65;
 * @return {string}
 */
proto.Brand.prototype.getMadeinusadescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 65, ""));
};


/** @param {string} value */
proto.Brand.prototype.setMadeinusadescription = function(value) {
  jspb.Message.setField(this, 65, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearMadeinusadescription = function() {
  jspb.Message.setField(this, 65, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasMadeinusadescription = function() {
  return jspb.Message.getField(this, 65) != null;
};


/**
 * optional string handMadeDescription = 66;
 * @return {string}
 */
proto.Brand.prototype.getHandmadedescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 66, ""));
};


/** @param {string} value */
proto.Brand.prototype.setHandmadedescription = function(value) {
  jspb.Message.setField(this, 66, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearHandmadedescription = function() {
  jspb.Message.setField(this, 66, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasHandmadedescription = function() {
  return jspb.Message.getField(this, 66) != null;
};


/**
 * optional string charitableDescription = 67;
 * @return {string}
 */
proto.Brand.prototype.getCharitabledescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 67, ""));
};


/** @param {string} value */
proto.Brand.prototype.setCharitabledescription = function(value) {
  jspb.Message.setField(this, 67, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearCharitabledescription = function() {
  jspb.Message.setField(this, 67, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasCharitabledescription = function() {
  return jspb.Message.getField(this, 67) != null;
};


/**
 * optional string ecoFriendlyDescription = 68;
 * @return {string}
 */
proto.Brand.prototype.getEcofriendlydescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 68, ""));
};


/** @param {string} value */
proto.Brand.prototype.setEcofriendlydescription = function(value) {
  jspb.Message.setField(this, 68, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearEcofriendlydescription = function() {
  jspb.Message.setField(this, 68, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasEcofriendlydescription = function() {
  return jspb.Message.getField(this, 68) != null;
};


/**
 * optional bool local = 40;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getLocal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 40, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setLocal = function(value) {
  jspb.Message.setField(this, 40, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearLocal = function() {
  jspb.Message.setField(this, 40, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasLocal = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional Image storyImage = 61;
 * @return {?proto.Image}
 */
proto.Brand.prototype.getStoryimage = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 61));
};


/** @param {?proto.Image|undefined} value */
proto.Brand.prototype.setStoryimage = function(value) {
  jspb.Message.setWrapperField(this, 61, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Brand.prototype.clearStoryimage = function() {
  this.setStoryimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasStoryimage = function() {
  return jspb.Message.getField(this, 61) != null;
};


/**
 * optional string videoUrl = 62;
 * @return {string}
 */
proto.Brand.prototype.getVideourl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 62, ""));
};


/** @param {string} value */
proto.Brand.prototype.setVideourl = function(value) {
  jspb.Message.setField(this, 62, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearVideourl = function() {
  jspb.Message.setField(this, 62, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasVideourl = function() {
  return jspb.Message.getField(this, 62) != null;
};


/**
 * repeated Image socialMediaImages = 63;
 * @return {!Array<!proto.Image>}
 */
proto.Brand.prototype.getSocialmediaimagesList = function() {
  return /** @type{!Array<!proto.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Image, 63));
};


/** @param {!Array<!proto.Image>} value */
proto.Brand.prototype.setSocialmediaimagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 63, value);
};


/**
 * @param {!proto.Image=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Image}
 */
proto.Brand.prototype.addSocialmediaimages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 63, opt_value, proto.Image, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Brand.prototype.clearSocialmediaimagesList = function() {
  this.setSocialmediaimagesList([]);
};


/**
 * optional int64 leadTimeWeeks = 36;
 * @return {number}
 */
proto.Brand.prototype.getLeadtimeweeks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 36, 0));
};


/** @param {number} value */
proto.Brand.prototype.setLeadtimeweeks = function(value) {
  jspb.Message.setField(this, 36, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearLeadtimeweeks = function() {
  jspb.Message.setField(this, 36, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasLeadtimeweeks = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional int64 leadTimeDays = 74;
 * @return {number}
 */
proto.Brand.prototype.getLeadtimedays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 74, 0));
};


/** @param {number} value */
proto.Brand.prototype.setLeadtimedays = function(value) {
  jspb.Message.setField(this, 74, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearLeadtimedays = function() {
  jspb.Message.setField(this, 74, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasLeadtimedays = function() {
  return jspb.Message.getField(this, 74) != null;
};


/**
 * optional int64 lowerBoundLeadTimeDays = 111;
 * @return {number}
 */
proto.Brand.prototype.getLowerboundleadtimedays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 111, 0));
};


/** @param {number} value */
proto.Brand.prototype.setLowerboundleadtimedays = function(value) {
  jspb.Message.setField(this, 111, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearLowerboundleadtimedays = function() {
  jspb.Message.setField(this, 111, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasLowerboundleadtimedays = function() {
  return jspb.Message.getField(this, 111) != null;
};


/**
 * optional int64 upperBoundLeadTimeDays = 112;
 * @return {number}
 */
proto.Brand.prototype.getUpperboundleadtimedays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 112, 0));
};


/** @param {number} value */
proto.Brand.prototype.setUpperboundleadtimedays = function(value) {
  jspb.Message.setField(this, 112, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearUpperboundleadtimedays = function() {
  jspb.Message.setField(this, 112, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasUpperboundleadtimedays = function() {
  return jspb.Message.getField(this, 112) != null;
};


/**
 * optional bool favorite = 51;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getFavorite = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 51, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setFavorite = function(value) {
  jspb.Message.setField(this, 51, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearFavorite = function() {
  jspb.Message.setField(this, 51, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasFavorite = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * optional int64 likes = 18;
 * @return {number}
 */
proto.Brand.prototype.getLikes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.Brand.prototype.setLikes = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearLikes = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasLikes = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional int64 creationYear = 19;
 * @return {number}
 */
proto.Brand.prototype.getCreationyear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.Brand.prototype.setCreationyear = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearCreationyear = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasCreationyear = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional Image squaredImage = 82;
 * @return {?proto.Image}
 */
proto.Brand.prototype.getSquaredimage = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 82));
};


/** @param {?proto.Image|undefined} value */
proto.Brand.prototype.setSquaredimage = function(value) {
  jspb.Message.setWrapperField(this, 82, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Brand.prototype.clearSquaredimage = function() {
  this.setSquaredimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasSquaredimage = function() {
  return jspb.Message.getField(this, 82) != null;
};


/**
 * map<string, Image> squaredCategoryImages = 109;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Image>}
 */
proto.Brand.prototype.getSquaredcategoryimagesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Image>} */ (
      jspb.Message.getMapField(this, 109, opt_noLazyCreate,
      proto.Image));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.Brand.prototype.clearSquaredcategoryimagesMap = function() {
  this.getSquaredcategoryimagesMap().clear();
};


/**
 * optional Image emailHeroImage = 20;
 * @return {?proto.Image}
 */
proto.Brand.prototype.getEmailheroimage = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 20));
};


/** @param {?proto.Image|undefined} value */
proto.Brand.prototype.setEmailheroimage = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Brand.prototype.clearEmailheroimage = function() {
  this.setEmailheroimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasEmailheroimage = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional string emailDescription = 21;
 * @return {string}
 */
proto.Brand.prototype.getEmaildescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.Brand.prototype.setEmaildescription = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearEmaildescription = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasEmaildescription = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional int64 facebookFollowers = 32;
 * @return {number}
 */
proto.Brand.prototype.getFacebookfollowers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/** @param {number} value */
proto.Brand.prototype.setFacebookfollowers = function(value) {
  jspb.Message.setField(this, 32, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearFacebookfollowers = function() {
  jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasFacebookfollowers = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional int64 instagramFollowers = 33;
 * @return {number}
 */
proto.Brand.prototype.getInstagramfollowers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/** @param {number} value */
proto.Brand.prototype.setInstagramfollowers = function(value) {
  jspb.Message.setField(this, 33, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearInstagramfollowers = function() {
  jspb.Message.setField(this, 33, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasInstagramfollowers = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional int64 twitterFollowers = 34;
 * @return {number}
 */
proto.Brand.prototype.getTwitterfollowers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/** @param {number} value */
proto.Brand.prototype.setTwitterfollowers = function(value) {
  jspb.Message.setField(this, 34, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearTwitterfollowers = function() {
  jspb.Message.setField(this, 34, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasTwitterfollowers = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional int64 firstOrderRewardAmountCents = 52;
 * @return {number}
 */
proto.Brand.prototype.getFirstorderrewardamountcents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 52, 0));
};


/** @param {number} value */
proto.Brand.prototype.setFirstorderrewardamountcents = function(value) {
  jspb.Message.setField(this, 52, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearFirstorderrewardamountcents = function() {
  jspb.Message.setField(this, 52, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasFirstorderrewardamountcents = function() {
  return jspb.Message.getField(this, 52) != null;
};


/**
 * optional int64 defaultRewardAmountCents = 53;
 * @return {number}
 */
proto.Brand.prototype.getDefaultrewardamountcents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 53, 0));
};


/** @param {number} value */
proto.Brand.prototype.setDefaultrewardamountcents = function(value) {
  jspb.Message.setField(this, 53, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearDefaultrewardamountcents = function() {
  jspb.Message.setField(this, 53, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasDefaultrewardamountcents = function() {
  return jspb.Message.getField(this, 53) != null;
};


/**
 * optional int64 firstOrderDiscountPercentage = 56;
 * @return {number}
 */
proto.Brand.prototype.getFirstorderdiscountpercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 56, 0));
};


/** @param {number} value */
proto.Brand.prototype.setFirstorderdiscountpercentage = function(value) {
  jspb.Message.setField(this, 56, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearFirstorderdiscountpercentage = function() {
  jspb.Message.setField(this, 56, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasFirstorderdiscountpercentage = function() {
  return jspb.Message.getField(this, 56) != null;
};


/**
 * optional int64 defaultDiscountPercentage = 57;
 * @return {number}
 */
proto.Brand.prototype.getDefaultdiscountpercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 57, 0));
};


/** @param {number} value */
proto.Brand.prototype.setDefaultdiscountpercentage = function(value) {
  jspb.Message.setField(this, 57, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearDefaultdiscountpercentage = function() {
  jspb.Message.setField(this, 57, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasDefaultdiscountpercentage = function() {
  return jspb.Message.getField(this, 57) != null;
};


/**
 * optional bool isFirstOrder = 72;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getIsfirstorder = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 72, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setIsfirstorder = function(value) {
  jspb.Message.setField(this, 72, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearIsfirstorder = function() {
  jspb.Message.setField(this, 72, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasIsfirstorder = function() {
  return jspb.Message.getField(this, 72) != null;
};


/**
 * optional int64 firstOrderReturnsLimitCents = 73;
 * @return {number}
 */
proto.Brand.prototype.getFirstorderreturnslimitcents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 73, 0));
};


/** @param {number} value */
proto.Brand.prototype.setFirstorderreturnslimitcents = function(value) {
  jspb.Message.setField(this, 73, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearFirstorderreturnslimitcents = function() {
  jspb.Message.setField(this, 73, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasFirstorderreturnslimitcents = function() {
  return jspb.Message.getField(this, 73) != null;
};


/**
 * optional bool zipCodeProtectionEnabled = 85;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getZipcodeprotectionenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 85, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setZipcodeprotectionenabled = function(value) {
  jspb.Message.setField(this, 85, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearZipcodeprotectionenabled = function() {
  jspb.Message.setField(this, 85, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasZipcodeprotectionenabled = function() {
  return jspb.Message.getField(this, 85) != null;
};


/**
 * optional int64 shopifyAccessRenewedAt = 87;
 * @return {number}
 */
proto.Brand.prototype.getShopifyaccessrenewedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 87, 0));
};


/** @param {number} value */
proto.Brand.prototype.setShopifyaccessrenewedat = function(value) {
  jspb.Message.setField(this, 87, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearShopifyaccessrenewedat = function() {
  jspb.Message.setField(this, 87, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasShopifyaccessrenewedat = function() {
  return jspb.Message.getField(this, 87) != null;
};


/**
 * optional bool posSyncingEnabled = 88;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getPossyncingenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 88, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setPossyncingenabled = function(value) {
  jspb.Message.setField(this, 88, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearPossyncingenabled = function() {
  jspb.Message.setField(this, 88, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasPossyncingenabled = function() {
  return jspb.Message.getField(this, 88) != null;
};


/**
 * optional string shopifyAccesstoken = 89;
 * @return {string}
 */
proto.Brand.prototype.getShopifyaccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 89, ""));
};


/** @param {string} value */
proto.Brand.prototype.setShopifyaccesstoken = function(value) {
  jspb.Message.setField(this, 89, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearShopifyaccesstoken = function() {
  jspb.Message.setField(this, 89, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasShopifyaccesstoken = function() {
  return jspb.Message.getField(this, 89) != null;
};


/**
 * optional string shopifyShopName = 90;
 * @return {string}
 */
proto.Brand.prototype.getShopifyshopname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 90, ""));
};


/** @param {string} value */
proto.Brand.prototype.setShopifyshopname = function(value) {
  jspb.Message.setField(this, 90, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearShopifyshopname = function() {
  jspb.Message.setField(this, 90, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasShopifyshopname = function() {
  return jspb.Message.getField(this, 90) != null;
};


/**
 * optional int64 firstActiveAt = 95;
 * @return {number}
 */
proto.Brand.prototype.getFirstactiveat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 95, 0));
};


/** @param {number} value */
proto.Brand.prototype.setFirstactiveat = function(value) {
  jspb.Message.setField(this, 95, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearFirstactiveat = function() {
  jspb.Message.setField(this, 95, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasFirstactiveat = function() {
  return jspb.Message.getField(this, 95) != null;
};


/**
 * optional int64 activeProductsCount = 99;
 * @return {number}
 */
proto.Brand.prototype.getActiveproductscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 99, 0));
};


/** @param {number} value */
proto.Brand.prototype.setActiveproductscount = function(value) {
  jspb.Message.setField(this, 99, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearActiveproductscount = function() {
  jspb.Message.setField(this, 99, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasActiveproductscount = function() {
  return jspb.Message.getField(this, 99) != null;
};


/**
 * optional int64 lastProductAddedAt = 104;
 * @return {number}
 */
proto.Brand.prototype.getLastproductaddedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 104, 0));
};


/** @param {number} value */
proto.Brand.prototype.setLastproductaddedat = function(value) {
  jspb.Message.setField(this, 104, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearLastproductaddedat = function() {
  jspb.Message.setField(this, 104, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasLastproductaddedat = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional bool hasNewProducts = 105;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getHasnewproducts = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 105, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setHasnewproducts = function(value) {
  jspb.Message.setField(this, 105, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearHasnewproducts = function() {
  jspb.Message.setField(this, 105, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasHasnewproducts = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional int64 elevateCommissionBps = 103;
 * @return {number}
 */
proto.Brand.prototype.getElevatecommissionbps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 103, 0));
};


/** @param {number} value */
proto.Brand.prototype.setElevatecommissionbps = function(value) {
  jspb.Message.setField(this, 103, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearElevatecommissionbps = function() {
  jspb.Message.setField(this, 103, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasElevatecommissionbps = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional bool shipWithIndigoFair = 106;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getShipwithindigofair = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 106, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setShipwithindigofair = function(value) {
  jspb.Message.setField(this, 106, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearShipwithindigofair = function() {
  jspb.Message.setField(this, 106, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasShipwithindigofair = function() {
  return jspb.Message.getField(this, 106) != null;
};


/**
 * optional bool isBoomExclusive = 107;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getIsboomexclusive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 107, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setIsboomexclusive = function(value) {
  jspb.Message.setField(this, 107, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearIsboomexclusive = function() {
  jspb.Message.setField(this, 107, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasIsboomexclusive = function() {
  return jspb.Message.getField(this, 107) != null;
};


/**
 * optional bool allowsScheduledOrders = 108;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getAllowsscheduledorders = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 108, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setAllowsscheduledorders = function(value) {
  jspb.Message.setField(this, 108, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearAllowsscheduledorders = function() {
  jspb.Message.setField(this, 108, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasAllowsscheduledorders = function() {
  return jspb.Message.getField(this, 108) != null;
};


/**
 * optional bool isNew = 110;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getIsnew = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 110, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setIsnew = function(value) {
  jspb.Message.setField(this, 110, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearIsnew = function() {
  jspb.Message.setField(this, 110, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasIsnew = function() {
  return jspb.Message.getField(this, 110) != null;
};


/**
 * optional int64 thanksgivingCutoffDate = 113;
 * @return {number}
 */
proto.Brand.prototype.getThanksgivingcutoffdate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 113, 0));
};


/** @param {number} value */
proto.Brand.prototype.setThanksgivingcutoffdate = function(value) {
  jspb.Message.setField(this, 113, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearThanksgivingcutoffdate = function() {
  jspb.Message.setField(this, 113, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasThanksgivingcutoffdate = function() {
  return jspb.Message.getField(this, 113) != null;
};


/**
 * optional int64 christmasCutoffDate = 114;
 * @return {number}
 */
proto.Brand.prototype.getChristmascutoffdate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 114, 0));
};


/** @param {number} value */
proto.Brand.prototype.setChristmascutoffdate = function(value) {
  jspb.Message.setField(this, 114, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearChristmascutoffdate = function() {
  jspb.Message.setField(this, 114, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasChristmascutoffdate = function() {
  return jspb.Message.getField(this, 114) != null;
};


/**
 * optional bool overrideLeadTimeEstimates = 115;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getOverrideleadtimeestimates = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 115, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setOverrideleadtimeestimates = function(value) {
  jspb.Message.setField(this, 115, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearOverrideleadtimeestimates = function() {
  jspb.Message.setField(this, 115, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasOverrideleadtimeestimates = function() {
  return jspb.Message.getField(this, 115) != null;
};


/**
 * optional int64 vacationStartDate = 118;
 * @return {number}
 */
proto.Brand.prototype.getVacationstartdate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 118, 0));
};


/** @param {number} value */
proto.Brand.prototype.setVacationstartdate = function(value) {
  jspb.Message.setField(this, 118, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearVacationstartdate = function() {
  jspb.Message.setField(this, 118, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasVacationstartdate = function() {
  return jspb.Message.getField(this, 118) != null;
};


/**
 * optional int64 vacationEndDate = 119;
 * @return {number}
 */
proto.Brand.prototype.getVacationenddate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 119, 0));
};


/** @param {number} value */
proto.Brand.prototype.setVacationenddate = function(value) {
  jspb.Message.setField(this, 119, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearVacationenddate = function() {
  jspb.Message.setField(this, 119, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasVacationenddate = function() {
  return jspb.Message.getField(this, 119) != null;
};


/**
 * optional string vacationBannerText = 120;
 * @return {string}
 */
proto.Brand.prototype.getVacationbannertext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 120, ""));
};


/** @param {string} value */
proto.Brand.prototype.setVacationbannertext = function(value) {
  jspb.Message.setField(this, 120, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearVacationbannertext = function() {
  jspb.Message.setField(this, 120, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasVacationbannertext = function() {
  return jspb.Message.getField(this, 120) != null;
};


/**
 * optional bool noConsumerResale = 126;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getNoconsumerresale = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 126, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setNoconsumerresale = function(value) {
  jspb.Message.setField(this, 126, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearNoconsumerresale = function() {
  jspb.Message.setField(this, 126, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasNoconsumerresale = function() {
  return jspb.Message.getField(this, 126) != null;
};


/**
 * optional bool acceptsReturns = 127;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getAcceptsreturns = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 127, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setAcceptsreturns = function(value) {
  jspb.Message.setField(this, 127, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearAcceptsreturns = function() {
  jspb.Message.setField(this, 127, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasAcceptsreturns = function() {
  return jspb.Message.getField(this, 127) != null;
};


/**
 * optional int64 returnOrdersDiscountBps = 128;
 * @return {number}
 */
proto.Brand.prototype.getReturnordersdiscountbps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 128, 0));
};


/** @param {number} value */
proto.Brand.prototype.setReturnordersdiscountbps = function(value) {
  jspb.Message.setField(this, 128, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearReturnordersdiscountbps = function() {
  jspb.Message.setField(this, 128, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasReturnordersdiscountbps = function() {
  return jspb.Message.getField(this, 128) != null;
};


/**
 * optional int64 version = 149;
 * @return {number}
 */
proto.Brand.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 149, 0));
};


/** @param {number} value */
proto.Brand.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 149, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearVersion = function() {
  jspb.Message.setField(this, 149, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 149) != null;
};


/**
 * optional bool canSetPackagingAndHandlingCosts = 152;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Brand.prototype.getCansetpackagingandhandlingcosts = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 152, false));
};


/** @param {boolean} value */
proto.Brand.prototype.setCansetpackagingandhandlingcosts = function(value) {
  jspb.Message.setField(this, 152, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Brand.prototype.clearCansetpackagingandhandlingcosts = function() {
  jspb.Message.setField(this, 152, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Brand.prototype.hasCansetpackagingandhandlingcosts = function() {
  return jspb.Message.getField(this, 152) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Color.prototype.toObject = function(opt_includeInstance) {
  return proto.Color.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Color} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Color.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getField(msg, 1),
    rgb: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Color}
 */
proto.Color.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Color;
  return proto.Color.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Color} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Color}
 */
proto.Color.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRgb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Color.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Color.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Color} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Color.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Color.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Color.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Color.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Color.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string rgb = 2;
 * @return {string}
 */
proto.Color.prototype.getRgb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Color.prototype.setRgb = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Color.prototype.clearRgb = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Color.prototype.hasRgb = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProductOption.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProductOption.prototype.toObject = function(opt_includeInstance) {
  return proto.ProductOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProductOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductOption.toObject = function(includeInstance, msg) {
  var obj = {
    token: jspb.Message.getField(msg, 1),
    active: jspb.Message.getField(msg, 2),
    deleted: jspb.Message.getField(msg, 17),
    groupname: jspb.Message.getField(msg, 3),
    parenttoken: jspb.Message.getField(msg, 4),
    name: jspb.Message.getField(msg, 5),
    brandcode: jspb.Message.getField(msg, 6),
    description: jspb.Message.getField(msg, 7),
    color: (f = msg.getColor()) && proto.Color.toObject(includeInstance, f),
    wholesalepricecents: jspb.Message.getField(msg, 9),
    retailpricecents: jspb.Message.getField(msg, 10),
    unitmultiplier: jspb.Message.getField(msg, 11),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.Image.toObject, includeInstance),
    backordereduntildate: jspb.Message.getField(msg, 13),
    hastesters: jspb.Message.getField(msg, 14),
    availableunits: jspb.Message.getField(msg, 15),
    testerbrandcode: jspb.Message.getField(msg, 18),
    producttoken: jspb.Message.getField(msg, 19),
    version: jspb.Message.getField(msg, 49)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProductOption}
 */
proto.ProductOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProductOption;
  return proto.ProductOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProductOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProductOption}
 */
proto.ProductOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParenttoken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrandcode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 8:
      var value = new proto.Color;
      reader.readMessage(value,proto.Color.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWholesalepricecents(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRetailpricecents(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnitmultiplier(value);
      break;
    case 12:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.addImages(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBackordereduntildate(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHastesters(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAvailableunits(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setTesterbrandcode(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setProducttoken(value);
      break;
    case 49:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProductOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProductOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProductOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Color.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeString(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 49));
  if (f != null) {
    writer.writeInt64(
      49,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.ProductOption.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ProductOption.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearToken = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool active = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ProductOption.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ProductOption.prototype.setActive = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearActive = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasActive = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool deleted = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ProductOption.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 17, false));
};


/** @param {boolean} value */
proto.ProductOption.prototype.setDeleted = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearDeleted = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasDeleted = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string groupName = 3;
 * @return {string}
 */
proto.ProductOption.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ProductOption.prototype.setGroupname = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearGroupname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasGroupname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string parentToken = 4;
 * @return {string}
 */
proto.ProductOption.prototype.getParenttoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ProductOption.prototype.setParenttoken = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearParenttoken = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasParenttoken = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.ProductOption.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ProductOption.prototype.setName = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearName = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasName = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string brandCode = 6;
 * @return {string}
 */
proto.ProductOption.prototype.getBrandcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ProductOption.prototype.setBrandcode = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearBrandcode = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasBrandcode = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string description = 7;
 * @return {string}
 */
proto.ProductOption.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.ProductOption.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearDescription = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Color color = 8;
 * @return {?proto.Color}
 */
proto.ProductOption.prototype.getColor = function() {
  return /** @type{?proto.Color} */ (
    jspb.Message.getWrapperField(this, proto.Color, 8));
};


/** @param {?proto.Color|undefined} value */
proto.ProductOption.prototype.setColor = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ProductOption.prototype.clearColor = function() {
  this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasColor = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 wholesalePriceCents = 9;
 * @return {number}
 */
proto.ProductOption.prototype.getWholesalepricecents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ProductOption.prototype.setWholesalepricecents = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearWholesalepricecents = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasWholesalepricecents = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int64 retailPriceCents = 10;
 * @return {number}
 */
proto.ProductOption.prototype.getRetailpricecents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.ProductOption.prototype.setRetailpricecents = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearRetailpricecents = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasRetailpricecents = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 unitMultiplier = 11;
 * @return {number}
 */
proto.ProductOption.prototype.getUnitmultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.ProductOption.prototype.setUnitmultiplier = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearUnitmultiplier = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasUnitmultiplier = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated Image images = 12;
 * @return {!Array<!proto.Image>}
 */
proto.ProductOption.prototype.getImagesList = function() {
  return /** @type{!Array<!proto.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Image, 12));
};


/** @param {!Array<!proto.Image>} value */
proto.ProductOption.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.Image=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Image}
 */
proto.ProductOption.prototype.addImages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.Image, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ProductOption.prototype.clearImagesList = function() {
  this.setImagesList([]);
};


/**
 * optional int64 backorderedUntilDate = 13;
 * @return {number}
 */
proto.ProductOption.prototype.getBackordereduntildate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.ProductOption.prototype.setBackordereduntildate = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearBackordereduntildate = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasBackordereduntildate = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool hasTesters = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ProductOption.prototype.getHastesters = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.ProductOption.prototype.setHastesters = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearHastesters = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasHastesters = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int64 availableUnits = 15;
 * @return {number}
 */
proto.ProductOption.prototype.getAvailableunits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.ProductOption.prototype.setAvailableunits = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearAvailableunits = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasAvailableunits = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string testerBrandCode = 18;
 * @return {string}
 */
proto.ProductOption.prototype.getTesterbrandcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.ProductOption.prototype.setTesterbrandcode = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearTesterbrandcode = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasTesterbrandcode = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string productToken = 19;
 * @return {string}
 */
proto.ProductOption.prototype.getProducttoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.ProductOption.prototype.setProducttoken = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearProducttoken = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasProducttoken = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional int64 version = 49;
 * @return {number}
 */
proto.ProductOption.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 49, 0));
};


/** @param {number} value */
proto.ProductOption.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 49, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ProductOption.prototype.clearVersion = function() {
  jspb.Message.setField(this, 49, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProductOption.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 49) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Product.repeatedFields_ = [13,14,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Product.prototype.toObject = function(opt_includeInstance) {
  return proto.Product.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Product} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Product.toObject = function(includeInstance, msg) {
  var obj = {
    token: jspb.Message.getField(msg, 1),
    id: jspb.Message.getField(msg, 22),
    version: jspb.Message.getField(msg, 30),
    brandtoken: jspb.Message.getField(msg, 2),
    originalbrandtoken: jspb.Message.getField(msg, 31),
    active: jspb.Message.getField(msg, 3),
    name: jspb.Message.getField(msg, 4),
    shortdescription: jspb.Message.getField(msg, 5),
    description: jspb.Message.getField(msg, 6),
    wholesalepricecents: jspb.Message.getField(msg, 7),
    retailpricecents: jspb.Message.getField(msg, 8),
    testerpricecents: jspb.Message.getField(msg, 27),
    unitmultiplier: jspb.Message.getField(msg, 9),
    url: jspb.Message.getField(msg, 10),
    categoriesList: jspb.Message.getRepeatedField(msg, 13),
    optionsList: jspb.Message.toObjectList(msg.getOptionsList(),
    proto.ProductOption.toObject, includeInstance),
    amazonreviewcount: jspb.Message.getField(msg, 15),
    amazonurl: jspb.Message.getField(msg, 16),
    lowestonlinepricecents: jspb.Message.getField(msg, 24),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.Image.toObject, includeInstance),
    manualrecommendation: jspb.Message.getField(msg, 18),
    score: jspb.Message.getField(msg, 20),
    newscore: jspb.Message.getField(msg, 29),
    favorite: jspb.Message.getField(msg, 21),
    makerbestseller: jspb.Message.getField(msg, 23),
    makerrelativeposition: jspb.Message.getField(msg, 26),
    backordereduntildate: jspb.Message.getField(msg, 25),
    isnew: jspb.Message.getField(msg, 32),
    returnable: jspb.Message.getField(msg, 33),
    custom: jspb.Message.getField(msg, 34),
    createdat: jspb.Message.getField(msg, 50),
    updatedat: jspb.Message.getField(msg, 51)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Product}
 */
proto.Product.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Product;
  return proto.Product.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Product} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Product}
 */
proto.Product.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrandtoken(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalbrandtoken(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortdescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWholesalepricecents(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRetailpricecents(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTesterpricecents(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnitmultiplier(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addCategories(value);
      break;
    case 14:
      var value = new proto.ProductOption;
      reader.readMessage(value,proto.ProductOption.deserializeBinaryFromReader);
      msg.addOptions(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmazonreviewcount(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmazonurl(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLowestonlinepricecents(value);
      break;
    case 17:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.addImages(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setManualrecommendation(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScore(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNewscore(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFavorite(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMakerbestseller(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMakerrelativeposition(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBackordereduntildate(value);
      break;
    case 32:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnew(value);
      break;
    case 33:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReturnable(value);
      break;
    case 34:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCustom(value);
      break;
    case 50:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedat(value);
      break;
    case 51:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Product.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Product.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Product} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Product.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeInt64(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeInt64(
      30,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeString(
      31,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeInt64(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCategoriesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
  f = message.getOptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.ProductOption.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeInt64(
      24,
      f
    );
  }
  f = message.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeInt64(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeInt64(
      29,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeBool(
      21,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeBool(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeInt64(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeInt64(
      25,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeBool(
      32,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 33));
  if (f != null) {
    writer.writeBool(
      33,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 34));
  if (f != null) {
    writer.writeBool(
      34,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 50));
  if (f != null) {
    writer.writeInt64(
      50,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 51));
  if (f != null) {
    writer.writeInt64(
      51,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.Product.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Product.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearToken = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 id = 22;
 * @return {number}
 */
proto.Product.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.Product.prototype.setId = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearId = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasId = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional int64 version = 30;
 * @return {number}
 */
proto.Product.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/** @param {number} value */
proto.Product.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 30, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearVersion = function() {
  jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional string brandToken = 2;
 * @return {string}
 */
proto.Product.prototype.getBrandtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Product.prototype.setBrandtoken = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearBrandtoken = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasBrandtoken = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string originalBrandToken = 31;
 * @return {string}
 */
proto.Product.prototype.getOriginalbrandtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/** @param {string} value */
proto.Product.prototype.setOriginalbrandtoken = function(value) {
  jspb.Message.setField(this, 31, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearOriginalbrandtoken = function() {
  jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasOriginalbrandtoken = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional bool active = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Product.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Product.prototype.setActive = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearActive = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasActive = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.Product.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Product.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearName = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string shortDescription = 5;
 * @return {string}
 */
proto.Product.prototype.getShortdescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Product.prototype.setShortdescription = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearShortdescription = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasShortdescription = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.Product.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Product.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearDescription = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 wholesalePriceCents = 7;
 * @return {number}
 */
proto.Product.prototype.getWholesalepricecents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Product.prototype.setWholesalepricecents = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearWholesalepricecents = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasWholesalepricecents = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 retailPriceCents = 8;
 * @return {number}
 */
proto.Product.prototype.getRetailpricecents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Product.prototype.setRetailpricecents = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearRetailpricecents = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasRetailpricecents = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 testerPriceCents = 27;
 * @return {number}
 */
proto.Product.prototype.getTesterpricecents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/** @param {number} value */
proto.Product.prototype.setTesterpricecents = function(value) {
  jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearTesterpricecents = function() {
  jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasTesterpricecents = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional int64 unitMultiplier = 9;
 * @return {number}
 */
proto.Product.prototype.getUnitmultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Product.prototype.setUnitmultiplier = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearUnitmultiplier = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasUnitmultiplier = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string url = 10;
 * @return {string}
 */
proto.Product.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Product.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearUrl = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated string categories = 13;
 * @return {!Array<string>}
 */
proto.Product.prototype.getCategoriesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/** @param {!Array<string>} value */
proto.Product.prototype.setCategoriesList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Product.prototype.addCategories = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Product.prototype.clearCategoriesList = function() {
  this.setCategoriesList([]);
};


/**
 * repeated ProductOption options = 14;
 * @return {!Array<!proto.ProductOption>}
 */
proto.Product.prototype.getOptionsList = function() {
  return /** @type{!Array<!proto.ProductOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProductOption, 14));
};


/** @param {!Array<!proto.ProductOption>} value */
proto.Product.prototype.setOptionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.ProductOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProductOption}
 */
proto.Product.prototype.addOptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.ProductOption, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Product.prototype.clearOptionsList = function() {
  this.setOptionsList([]);
};


/**
 * optional int64 amazonReviewCount = 15;
 * @return {number}
 */
proto.Product.prototype.getAmazonreviewcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.Product.prototype.setAmazonreviewcount = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearAmazonreviewcount = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasAmazonreviewcount = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string amazonUrl = 16;
 * @return {string}
 */
proto.Product.prototype.getAmazonurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.Product.prototype.setAmazonurl = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearAmazonurl = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasAmazonurl = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int64 lowestOnlinePriceCents = 24;
 * @return {number}
 */
proto.Product.prototype.getLowestonlinepricecents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.Product.prototype.setLowestonlinepricecents = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearLowestonlinepricecents = function() {
  jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasLowestonlinepricecents = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * repeated Image images = 17;
 * @return {!Array<!proto.Image>}
 */
proto.Product.prototype.getImagesList = function() {
  return /** @type{!Array<!proto.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Image, 17));
};


/** @param {!Array<!proto.Image>} value */
proto.Product.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.Image=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Image}
 */
proto.Product.prototype.addImages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.Image, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Product.prototype.clearImagesList = function() {
  this.setImagesList([]);
};


/**
 * optional bool manualRecommendation = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Product.prototype.getManualrecommendation = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.Product.prototype.setManualrecommendation = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearManualrecommendation = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasManualrecommendation = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional int64 score = 20;
 * @return {number}
 */
proto.Product.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.Product.prototype.setScore = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearScore = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasScore = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional int64 newScore = 29;
 * @return {number}
 */
proto.Product.prototype.getNewscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/** @param {number} value */
proto.Product.prototype.setNewscore = function(value) {
  jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearNewscore = function() {
  jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasNewscore = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional bool favorite = 21;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Product.prototype.getFavorite = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 21, false));
};


/** @param {boolean} value */
proto.Product.prototype.setFavorite = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearFavorite = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasFavorite = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional bool makerBestSeller = 23;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Product.prototype.getMakerbestseller = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 23, false));
};


/** @param {boolean} value */
proto.Product.prototype.setMakerbestseller = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearMakerbestseller = function() {
  jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasMakerbestseller = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional int64 makerRelativePosition = 26;
 * @return {number}
 */
proto.Product.prototype.getMakerrelativeposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {number} value */
proto.Product.prototype.setMakerrelativeposition = function(value) {
  jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearMakerrelativeposition = function() {
  jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasMakerrelativeposition = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional int64 backorderedUntilDate = 25;
 * @return {number}
 */
proto.Product.prototype.getBackordereduntildate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.Product.prototype.setBackordereduntildate = function(value) {
  jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearBackordereduntildate = function() {
  jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasBackordereduntildate = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional bool isNew = 32;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Product.prototype.getIsnew = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 32, false));
};


/** @param {boolean} value */
proto.Product.prototype.setIsnew = function(value) {
  jspb.Message.setField(this, 32, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearIsnew = function() {
  jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasIsnew = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional bool returnable = 33;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Product.prototype.getReturnable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 33, false));
};


/** @param {boolean} value */
proto.Product.prototype.setReturnable = function(value) {
  jspb.Message.setField(this, 33, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearReturnable = function() {
  jspb.Message.setField(this, 33, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasReturnable = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional bool custom = 34;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Product.prototype.getCustom = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 34, false));
};


/** @param {boolean} value */
proto.Product.prototype.setCustom = function(value) {
  jspb.Message.setField(this, 34, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearCustom = function() {
  jspb.Message.setField(this, 34, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasCustom = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional int64 createdAt = 50;
 * @return {number}
 */
proto.Product.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 50, 0));
};


/** @param {number} value */
proto.Product.prototype.setCreatedat = function(value) {
  jspb.Message.setField(this, 50, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearCreatedat = function() {
  jspb.Message.setField(this, 50, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasCreatedat = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional int64 updatedAt = 51;
 * @return {number}
 */
proto.Product.prototype.getUpdatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 51, 0));
};


/** @param {number} value */
proto.Product.prototype.setUpdatedat = function(value) {
  jspb.Message.setField(this, 51, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Product.prototype.clearUpdatedat = function() {
  jspb.Message.setField(this, 51, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Product.prototype.hasUpdatedat = function() {
  return jspb.Message.getField(this, 51) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Image.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.toObject = function(includeInstance, msg) {
  var obj = {
    token: jspb.Message.getField(msg, 1),
    width: jspb.Message.getField(msg, 2),
    height: jspb.Message.getField(msg, 3),
    sequence: jspb.Message.getField(msg, 4),
    url: jspb.Message.getField(msg, 5),
    type: jspb.Message.getField(msg, 6),
    tagsList: jspb.Message.getRepeatedField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image}
 */
proto.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image;
  return proto.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image}
 */
proto.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSequence(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 6:
      var value = /** @type {!proto.Image.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {!proto.Image.Type} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Image.Type = {
  PRODUCT: 1,
  PACKAGING: 2,
  LIFESTYLE: 3,
  DEFAULT_BRAND: 4,
  LIGHT_TILE: 5,
  MEDIUM_TILE: 6,
  DARK_TILE: 7,
  LIGHT_WHOLESALE_PORTAL_LANDING: 8,
  DARK_WHOLESALE_PORTAL_LANDING: 9,
  LIGHT_WHOLESALE_PORTAL_SIGNUP: 10,
  DARK_WHOLESALE_PORTAL_SIGNUP: 11,
  HERO: 12,
  MOBILE: 13,
  DESKTOP: 14,
  TAGGED: 15
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.Image.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Image.prototype.clearToken = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 width = 2;
 * @return {number}
 */
proto.Image.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Image.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Image.prototype.clearWidth = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 height = 3;
 * @return {number}
 */
proto.Image.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Image.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Image.prototype.clearHeight = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 sequence = 4;
 * @return {number}
 */
proto.Image.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Image.prototype.setSequence = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Image.prototype.clearSequence = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.Image.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Image.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Image.prototype.clearUrl = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Type type = 6;
 * @return {!proto.Image.Type}
 */
proto.Image.prototype.getType = function() {
  return /** @type {!proto.Image.Type} */ (jspb.Message.getFieldWithDefault(this, 6, 1));
};


/** @param {!proto.Image.Type} value */
proto.Image.prototype.setType = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Image.prototype.clearType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.prototype.hasType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string tags = 7;
 * @return {!Array<string>}
 */
proto.Image.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.Image.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Image.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Image.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Category.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Category.prototype.toObject = function(opt_includeInstance) {
  return proto.Category.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Category} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Category.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getField(msg, 1),
    subcategoriesList: jspb.Message.toObjectList(msg.getSubcategoriesList(),
    proto.Category.toObject, includeInstance),
    isproductbased: jspb.Message.getField(msg, 3),
    linktomakercategory: jspb.Message.getField(msg, 4),
    isfeatured: jspb.Message.getField(msg, 5),
    token: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Category}
 */
proto.Category.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Category;
  return proto.Category.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Category} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Category}
 */
proto.Category.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Category;
      reader.readMessage(value,proto.Category.deserializeBinaryFromReader);
      msg.addSubcategories(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsproductbased(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinktomakercategory(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsfeatured(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Category.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Category.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Category} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Category.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubcategoriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Category.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Category.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Category.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Category.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Category.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Category subCategories = 2;
 * @return {!Array<!proto.Category>}
 */
proto.Category.prototype.getSubcategoriesList = function() {
  return /** @type{!Array<!proto.Category>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Category, 2));
};


/** @param {!Array<!proto.Category>} value */
proto.Category.prototype.setSubcategoriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Category=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Category}
 */
proto.Category.prototype.addSubcategories = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Category, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Category.prototype.clearSubcategoriesList = function() {
  this.setSubcategoriesList([]);
};


/**
 * optional bool isProductBased = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Category.prototype.getIsproductbased = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Category.prototype.setIsproductbased = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Category.prototype.clearIsproductbased = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Category.prototype.hasIsproductbased = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string linkToMakerCategory = 4;
 * @return {string}
 */
proto.Category.prototype.getLinktomakercategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Category.prototype.setLinktomakercategory = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Category.prototype.clearLinktomakercategory = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Category.prototype.hasLinktomakercategory = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool isFeatured = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Category.prototype.getIsfeatured = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.Category.prototype.setIsfeatured = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Category.prototype.clearIsfeatured = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Category.prototype.hasIsfeatured = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string token = 6;
 * @return {string}
 */
proto.Category.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Category.prototype.setToken = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 */
proto.Category.prototype.clearToken = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Category.prototype.hasToken = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PaginationData.prototype.toObject = function(opt_includeInstance) {
  return proto.PaginationData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PaginationData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PaginationData.toObject = function(includeInstance, msg) {
  var obj = {
    pagenumber: jspb.Message.getField(msg, 1),
    pagesize: jspb.Message.getField(msg, 2),
    pagecount: jspb.Message.getField(msg, 3),
    totalresults: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PaginationData}
 */
proto.PaginationData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PaginationData;
  return proto.PaginationData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PaginationData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PaginationData}
 */
proto.PaginationData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagenumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagecount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalresults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PaginationData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PaginationData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PaginationData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PaginationData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 pageNumber = 1;
 * @return {number}
 */
proto.PaginationData.prototype.getPagenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PaginationData.prototype.setPagenumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.PaginationData.prototype.clearPagenumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PaginationData.prototype.hasPagenumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 pageSize = 2;
 * @return {number}
 */
proto.PaginationData.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PaginationData.prototype.setPagesize = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.PaginationData.prototype.clearPagesize = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PaginationData.prototype.hasPagesize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 pageCount = 3;
 * @return {number}
 */
proto.PaginationData.prototype.getPagecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PaginationData.prototype.setPagecount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.PaginationData.prototype.clearPagecount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PaginationData.prototype.hasPagecount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 totalResults = 4;
 * @return {number}
 */
proto.PaginationData.prototype.getTotalresults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.PaginationData.prototype.setTotalresults = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.PaginationData.prototype.clearTotalresults = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PaginationData.prototype.hasTotalresults = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SearchMakersWithFiltersRequest.repeatedFields_ = [2,3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SearchMakersWithFiltersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SearchMakersWithFiltersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SearchMakersWithFiltersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchMakersWithFiltersRequest.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getField(msg, 1),
    statesList: jspb.Message.getRepeatedField(msg, 2),
    makervaluesList: jspb.Message.getRepeatedField(msg, 3),
    category: jspb.Message.getField(msg, 4),
    maximummakerminimumcents: jspb.Message.getField(msg, 5),
    makerminimumthresholdsList: jspb.Message.getRepeatedField(msg, 6),
    leadtime: jspb.Message.getField(msg, 7),
    paginationdata: (f = msg.getPaginationdata()) && proto.PaginationData.toObject(includeInstance, f),
    sortorder: jspb.Message.getField(msg, 9),
    sortby: jspb.Message.getField(msg, 10),
    maxproductsperbrand: jspb.Message.getFieldWithDefault(msg, 11, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SearchMakersWithFiltersRequest}
 */
proto.SearchMakersWithFiltersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SearchMakersWithFiltersRequest;
  return proto.SearchMakersWithFiltersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SearchMakersWithFiltersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SearchMakersWithFiltersRequest}
 */
proto.SearchMakersWithFiltersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addStates(value);
      break;
    case 3:
      var value = /** @type {!proto.MakerValue} */ (reader.readEnum());
      msg.addMakervalues(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaximummakerminimumcents(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addMakerminimumthresholds(value);
      break;
    case 7:
      var value = /** @type {!proto.LeadTime} */ (reader.readEnum());
      msg.setLeadtime(value);
      break;
    case 8:
      var value = new proto.PaginationData;
      reader.readMessage(value,proto.PaginationData.deserializeBinaryFromReader);
      msg.setPaginationdata(value);
      break;
    case 9:
      var value = /** @type {!proto.SortOrder} */ (reader.readEnum());
      msg.setSortorder(value);
      break;
    case 10:
      var value = /** @type {!proto.SearchMakersWithFiltersSortBy} */ (reader.readEnum());
      msg.setSortby(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxproductsperbrand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SearchMakersWithFiltersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SearchMakersWithFiltersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SearchMakersWithFiltersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchMakersWithFiltersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getMakervaluesList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMakerminimumthresholdsList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      6,
      f
    );
  }
  f = /** @type {!proto.LeadTime} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getPaginationdata();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.PaginationData.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.SortOrder} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = /** @type {!proto.SearchMakersWithFiltersSortBy} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt64(
      11,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.SearchMakersWithFiltersRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SearchMakersWithFiltersRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.SearchMakersWithFiltersRequest.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string states = 2;
 * @return {!Array<string>}
 */
proto.SearchMakersWithFiltersRequest.prototype.getStatesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.SearchMakersWithFiltersRequest.prototype.setStatesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.SearchMakersWithFiltersRequest.prototype.addStates = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.SearchMakersWithFiltersRequest.prototype.clearStatesList = function() {
  this.setStatesList([]);
};


/**
 * repeated MakerValue makerValues = 3;
 * @return {!Array<!proto.MakerValue>}
 */
proto.SearchMakersWithFiltersRequest.prototype.getMakervaluesList = function() {
  return /** @type {!Array<!proto.MakerValue>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<!proto.MakerValue>} value */
proto.SearchMakersWithFiltersRequest.prototype.setMakervaluesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.MakerValue} value
 * @param {number=} opt_index
 */
proto.SearchMakersWithFiltersRequest.prototype.addMakervalues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.SearchMakersWithFiltersRequest.prototype.clearMakervaluesList = function() {
  this.setMakervaluesList([]);
};


/**
 * optional string category = 4;
 * @return {string}
 */
proto.SearchMakersWithFiltersRequest.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.SearchMakersWithFiltersRequest.prototype.setCategory = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.SearchMakersWithFiltersRequest.prototype.clearCategory = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersRequest.prototype.hasCategory = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 maximumMakerMinimumCents = 5;
 * @return {number}
 */
proto.SearchMakersWithFiltersRequest.prototype.getMaximummakerminimumcents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SearchMakersWithFiltersRequest.prototype.setMaximummakerminimumcents = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 */
proto.SearchMakersWithFiltersRequest.prototype.clearMaximummakerminimumcents = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersRequest.prototype.hasMaximummakerminimumcents = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated uint64 makerMinimumThresholds = 6;
 * @return {!Array<number>}
 */
proto.SearchMakersWithFiltersRequest.prototype.getMakerminimumthresholdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<number>} value */
proto.SearchMakersWithFiltersRequest.prototype.setMakerminimumthresholdsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.SearchMakersWithFiltersRequest.prototype.addMakerminimumthresholds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.SearchMakersWithFiltersRequest.prototype.clearMakerminimumthresholdsList = function() {
  this.setMakerminimumthresholdsList([]);
};


/**
 * optional LeadTime leadTime = 7;
 * @return {!proto.LeadTime}
 */
proto.SearchMakersWithFiltersRequest.prototype.getLeadtime = function() {
  return /** @type {!proto.LeadTime} */ (jspb.Message.getFieldWithDefault(this, 7, 1));
};


/** @param {!proto.LeadTime} value */
proto.SearchMakersWithFiltersRequest.prototype.setLeadtime = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 */
proto.SearchMakersWithFiltersRequest.prototype.clearLeadtime = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersRequest.prototype.hasLeadtime = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PaginationData paginationData = 8;
 * @return {?proto.PaginationData}
 */
proto.SearchMakersWithFiltersRequest.prototype.getPaginationdata = function() {
  return /** @type{?proto.PaginationData} */ (
    jspb.Message.getWrapperField(this, proto.PaginationData, 8));
};


/** @param {?proto.PaginationData|undefined} value */
proto.SearchMakersWithFiltersRequest.prototype.setPaginationdata = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.SearchMakersWithFiltersRequest.prototype.clearPaginationdata = function() {
  this.setPaginationdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersRequest.prototype.hasPaginationdata = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SortOrder sortOrder = 9;
 * @return {!proto.SortOrder}
 */
proto.SearchMakersWithFiltersRequest.prototype.getSortorder = function() {
  return /** @type {!proto.SortOrder} */ (jspb.Message.getFieldWithDefault(this, 9, 1));
};


/** @param {!proto.SortOrder} value */
proto.SearchMakersWithFiltersRequest.prototype.setSortorder = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 */
proto.SearchMakersWithFiltersRequest.prototype.clearSortorder = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersRequest.prototype.hasSortorder = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SearchMakersWithFiltersSortBy sortBy = 10;
 * @return {!proto.SearchMakersWithFiltersSortBy}
 */
proto.SearchMakersWithFiltersRequest.prototype.getSortby = function() {
  return /** @type {!proto.SearchMakersWithFiltersSortBy} */ (jspb.Message.getFieldWithDefault(this, 10, 1));
};


/** @param {!proto.SearchMakersWithFiltersSortBy} value */
proto.SearchMakersWithFiltersRequest.prototype.setSortby = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 */
proto.SearchMakersWithFiltersRequest.prototype.clearSortby = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersRequest.prototype.hasSortby = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 maxProductsPerBrand = 11;
 * @return {number}
 */
proto.SearchMakersWithFiltersRequest.prototype.getMaxproductsperbrand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 4));
};


/** @param {number} value */
proto.SearchMakersWithFiltersRequest.prototype.setMaxproductsperbrand = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 */
proto.SearchMakersWithFiltersRequest.prototype.clearMaxproductsperbrand = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersRequest.prototype.hasMaxproductsperbrand = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SearchMakersWithFiltersResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SearchMakersWithFiltersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SearchMakersWithFiltersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SearchMakersWithFiltersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchMakersWithFiltersResponse.toObject = function(includeInstance, msg) {
  var obj = {
    makervaluespreviewMap: (f = msg.getMakervaluespreviewMap()) ? f.toObject(includeInstance, undefined) : [],
    basedinstatepreviewMap: (f = msg.getBasedinstatepreviewMap()) ? f.toObject(includeInstance, undefined) : [],
    categoriespreviewMap: (f = msg.getCategoriespreviewMap()) ? f.toObject(includeInstance, undefined) : [],
    makerminimumspreviewMap: (f = msg.getMakerminimumspreviewMap()) ? f.toObject(includeInstance, undefined) : [],
    leadtimepreviewMap: (f = msg.getLeadtimepreviewMap()) ? f.toObject(includeInstance, undefined) : [],
    brandsList: jspb.Message.toObjectList(msg.getBrandsList(),
    proto.Brand.toObject, includeInstance),
    paginationdata: (f = msg.getPaginationdata()) && proto.PaginationData.toObject(includeInstance, f),
    sortorder: jspb.Message.getField(msg, 8),
    sortby: jspb.Message.getField(msg, 9),
    brandproductsMap: (f = msg.getBrandproductsMap()) ? f.toObject(includeInstance, proto.SearchMakersWithFiltersResponse.ProductsForCategory.toObject) : [],
    requestid: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SearchMakersWithFiltersResponse}
 */
proto.SearchMakersWithFiltersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SearchMakersWithFiltersResponse;
  return proto.SearchMakersWithFiltersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SearchMakersWithFiltersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SearchMakersWithFiltersResponse}
 */
proto.SearchMakersWithFiltersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMakervaluespreviewMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "");
         });
      break;
    case 2:
      var value = msg.getBasedinstatepreviewMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "");
         });
      break;
    case 3:
      var value = msg.getCategoriespreviewMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "");
         });
      break;
    case 4:
      var value = msg.getMakerminimumspreviewMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readUint64, null, 0);
         });
      break;
    case 5:
      var value = msg.getLeadtimepreviewMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "");
         });
      break;
    case 6:
      var value = new proto.Brand;
      reader.readMessage(value,proto.Brand.deserializeBinaryFromReader);
      msg.addBrands(value);
      break;
    case 7:
      var value = new proto.PaginationData;
      reader.readMessage(value,proto.PaginationData.deserializeBinaryFromReader);
      msg.setPaginationdata(value);
      break;
    case 8:
      var value = /** @type {!proto.SortOrder} */ (reader.readEnum());
      msg.setSortorder(value);
      break;
    case 9:
      var value = /** @type {!proto.SearchMakersWithFiltersSortBy} */ (reader.readEnum());
      msg.setSortby(value);
      break;
    case 10:
      var value = msg.getBrandproductsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.SearchMakersWithFiltersResponse.ProductsForCategory.deserializeBinaryFromReader, "");
         });
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SearchMakersWithFiltersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SearchMakersWithFiltersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SearchMakersWithFiltersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchMakersWithFiltersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMakervaluespreviewMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getBasedinstatepreviewMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getCategoriespreviewMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getMakerminimumspreviewMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getLeadtimepreviewMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getBrandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Brand.serializeBinaryToWriter
    );
  }
  f = message.getPaginationdata();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.PaginationData.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.SortOrder} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = /** @type {!proto.SearchMakersWithFiltersSortBy} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getBrandproductsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.SearchMakersWithFiltersResponse.ProductsForCategory.serializeBinaryToWriter);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.prototype.toObject = function(opt_includeInstance) {
  return proto.SearchMakersWithFiltersResponse.ProductsForCategory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SearchMakersWithFiltersResponse.ProductsForCategory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.toObject = function(includeInstance, msg) {
  var obj = {
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.Product.toObject, includeInstance),
    category: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SearchMakersWithFiltersResponse.ProductsForCategory}
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SearchMakersWithFiltersResponse.ProductsForCategory;
  return proto.SearchMakersWithFiltersResponse.ProductsForCategory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SearchMakersWithFiltersResponse.ProductsForCategory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SearchMakersWithFiltersResponse.ProductsForCategory}
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Product;
      reader.readMessage(value,proto.Product.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SearchMakersWithFiltersResponse.ProductsForCategory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SearchMakersWithFiltersResponse.ProductsForCategory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Product.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Product products = 1;
 * @return {!Array<!proto.Product>}
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.Product>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Product, 1));
};


/** @param {!Array<!proto.Product>} value */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.prototype.setProductsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Product=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Product}
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Product, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.prototype.clearProductsList = function() {
  this.setProductsList([]);
};


/**
 * optional string category = 2;
 * @return {string}
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.prototype.setCategory = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.prototype.clearCategory = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersResponse.ProductsForCategory.prototype.hasCategory = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, uint64> makerValuesPreview = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.SearchMakersWithFiltersResponse.prototype.getMakervaluespreviewMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.SearchMakersWithFiltersResponse.prototype.clearMakervaluespreviewMap = function() {
  this.getMakervaluespreviewMap().clear();
};


/**
 * map<string, uint64> basedInStatePreview = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.SearchMakersWithFiltersResponse.prototype.getBasedinstatepreviewMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.SearchMakersWithFiltersResponse.prototype.clearBasedinstatepreviewMap = function() {
  this.getBasedinstatepreviewMap().clear();
};


/**
 * map<string, uint64> categoriesPreview = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.SearchMakersWithFiltersResponse.prototype.getCategoriespreviewMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.SearchMakersWithFiltersResponse.prototype.clearCategoriespreviewMap = function() {
  this.getCategoriespreviewMap().clear();
};


/**
 * map<uint64, uint64> makerMinimumsPreview = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.SearchMakersWithFiltersResponse.prototype.getMakerminimumspreviewMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.SearchMakersWithFiltersResponse.prototype.clearMakerminimumspreviewMap = function() {
  this.getMakerminimumspreviewMap().clear();
};


/**
 * map<string, uint64> leadTimePreview = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.SearchMakersWithFiltersResponse.prototype.getLeadtimepreviewMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.SearchMakersWithFiltersResponse.prototype.clearLeadtimepreviewMap = function() {
  this.getLeadtimepreviewMap().clear();
};


/**
 * repeated Brand brands = 6;
 * @return {!Array<!proto.Brand>}
 */
proto.SearchMakersWithFiltersResponse.prototype.getBrandsList = function() {
  return /** @type{!Array<!proto.Brand>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Brand, 6));
};


/** @param {!Array<!proto.Brand>} value */
proto.SearchMakersWithFiltersResponse.prototype.setBrandsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Brand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Brand}
 */
proto.SearchMakersWithFiltersResponse.prototype.addBrands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Brand, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.SearchMakersWithFiltersResponse.prototype.clearBrandsList = function() {
  this.setBrandsList([]);
};


/**
 * optional PaginationData paginationData = 7;
 * @return {?proto.PaginationData}
 */
proto.SearchMakersWithFiltersResponse.prototype.getPaginationdata = function() {
  return /** @type{?proto.PaginationData} */ (
    jspb.Message.getWrapperField(this, proto.PaginationData, 7));
};


/** @param {?proto.PaginationData|undefined} value */
proto.SearchMakersWithFiltersResponse.prototype.setPaginationdata = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.SearchMakersWithFiltersResponse.prototype.clearPaginationdata = function() {
  this.setPaginationdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersResponse.prototype.hasPaginationdata = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SortOrder sortOrder = 8;
 * @return {!proto.SortOrder}
 */
proto.SearchMakersWithFiltersResponse.prototype.getSortorder = function() {
  return /** @type {!proto.SortOrder} */ (jspb.Message.getFieldWithDefault(this, 8, 1));
};


/** @param {!proto.SortOrder} value */
proto.SearchMakersWithFiltersResponse.prototype.setSortorder = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 */
proto.SearchMakersWithFiltersResponse.prototype.clearSortorder = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersResponse.prototype.hasSortorder = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SearchMakersWithFiltersSortBy sortBy = 9;
 * @return {!proto.SearchMakersWithFiltersSortBy}
 */
proto.SearchMakersWithFiltersResponse.prototype.getSortby = function() {
  return /** @type {!proto.SearchMakersWithFiltersSortBy} */ (jspb.Message.getFieldWithDefault(this, 9, 1));
};


/** @param {!proto.SearchMakersWithFiltersSortBy} value */
proto.SearchMakersWithFiltersResponse.prototype.setSortby = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 */
proto.SearchMakersWithFiltersResponse.prototype.clearSortby = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersResponse.prototype.hasSortby = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * map<string, ProductsForCategory> brandProducts = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.SearchMakersWithFiltersResponse.ProductsForCategory>}
 */
proto.SearchMakersWithFiltersResponse.prototype.getBrandproductsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.SearchMakersWithFiltersResponse.ProductsForCategory>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      proto.SearchMakersWithFiltersResponse.ProductsForCategory));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.SearchMakersWithFiltersResponse.prototype.clearBrandproductsMap = function() {
  this.getBrandproductsMap().clear();
};


/**
 * optional string requestId = 11;
 * @return {string}
 */
proto.SearchMakersWithFiltersResponse.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.SearchMakersWithFiltersResponse.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 */
proto.SearchMakersWithFiltersResponse.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchMakersWithFiltersResponse.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * @enum {number}
 */
proto.SortOrder = {
  ASC: 1,
  DESC: 2
};

/**
 * @enum {number}
 */
proto.MakerValue = {
  ECO_FRIENDLY: 1,
  HAND_MADE: 2,
  NOT_SOLD_ON_AMAZON: 3,
  CHARITABLE: 4,
  MADE_IN_USA: 5
};

/**
 * @enum {number}
 */
proto.LeadTime = {
  THREE_OR_LESS_DAYS: 1,
  SIX_OR_LESS_DAYS: 2,
  NINE_OR_LESS_DAYS: 3,
  FOURTEEN_OR_LESS_DAYS: 4
};

/**
 * @enum {number}
 */
proto.SearchMakersWithFiltersSortBy = {
  NAME: 1,
  SCORE: 2,
  FIRST_ACTIVE_AT: 3,
  MINIMUM: 4
};

goog.object.extend(exports, proto);
